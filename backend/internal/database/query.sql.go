// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/guregu/null"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (commentText, postedOn, threadId, parentComment, author) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, commenttext, postedon, threadid, parentcomment, author
`

type CreateCommentParams struct {
	Commenttext   string
	Postedon      time.Time
	Threadid      int32
	Parentcomment null.Int
	Author        string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.Commenttext,
		arg.Postedon,
		arg.Threadid,
		arg.Parentcomment,
		arg.Author,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Commenttext,
		&i.Postedon,
		&i.Threadid,
		&i.Parentcomment,
		&i.Author,
	)
	return i, err
}

const createTagThread = `-- name: CreateTagThread :one
INSERT INTO threads_tags (threadId, tagText) 
VALUES ($1, $2)
RETURNING threadid, tagtext
`

type CreateTagThreadParams struct {
	Threadid int32
	Tagtext  string
}

func (q *Queries) CreateTagThread(ctx context.Context, arg CreateTagThreadParams) (ThreadsTag, error) {
	row := q.db.QueryRowContext(ctx, createTagThread, arg.Threadid, arg.Tagtext)
	var i ThreadsTag
	err := row.Scan(&i.Threadid, &i.Tagtext)
	return i, err
}

const createThread = `-- name: CreateThread :one
INSERT INTO threads (title, threadText, postedOn, author) 
VALUES ($1, $2, $3, $4)
RETURNING id, title, threadtext, postedon, author
`

type CreateThreadParams struct {
	Title      string
	Threadtext string
	Postedon   time.Time
	Author     string
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, createThread,
		arg.Title,
		arg.Threadtext,
		arg.Postedon,
		arg.Author,
	)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Threadtext,
		&i.Postedon,
		&i.Author,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, pw) 
VALUES ($1, $2)
RETURNING username
`

type CreateUserParams struct {
	Username string
	Pw       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Pw)
	var username string
	err := row.Scan(&username)
	return username, err
}

const getAllThreads = `-- name: GetAllThreads :many
SELECT id, title, threadtext, postedon, author FROM threads
`

func (q *Queries) GetAllThreads(ctx context.Context) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, getAllThreads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Threadtext,
			&i.Postedon,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentById = `-- name: GetCommentById :one
SELECT id, commenttext, postedon, threadid, parentcomment, author FROM comments
WHERE id = $1
`

func (q *Queries) GetCommentById(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Commenttext,
		&i.Postedon,
		&i.Threadid,
		&i.Parentcomment,
		&i.Author,
	)
	return i, err
}

const getCommentsByThread = `-- name: GetCommentsByThread :many
SELECT id, commenttext, postedon, threadid, parentcomment, author FROM comments
WHERE threadId = $1
ORDER BY id ASC
`

func (q *Queries) GetCommentsByThread(ctx context.Context, threadid int32) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByThread, threadid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Commenttext,
			&i.Postedon,
			&i.Threadid,
			&i.Parentcomment,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByCount = `-- name: GetTagsByCount :many
SELECT tagText FROM threads_tags
GROUP BY tagText
ORDER BY COUNT(tagText) DESC
`

func (q *Queries) GetTagsByCount(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tagtext string
		if err := rows.Scan(&tagtext); err != nil {
			return nil, err
		}
		items = append(items, tagtext)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThreadById = `-- name: GetThreadById :one
SELECT id, title, threadtext, postedon, author FROM threads
WHERE id = $1
`

func (q *Queries) GetThreadById(ctx context.Context, id int32) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThreadById, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Threadtext,
		&i.Postedon,
		&i.Author,
	)
	return i, err
}

const getThreadsByTag = `-- name: GetThreadsByTag :many
SELECT id, title, threadtext, postedon, author, threadid, tagtext FROM threads t, threads_tags tags
WHERE t.id = tags.threadId AND tags.tagText = $1
`

type GetThreadsByTagRow struct {
	ID         int32
	Title      string
	Threadtext string
	Postedon   time.Time
	Author     string
	Threadid   int32
	Tagtext    string
}

func (q *Queries) GetThreadsByTag(ctx context.Context, tagtext string) ([]GetThreadsByTagRow, error) {
	rows, err := q.db.QueryContext(ctx, getThreadsByTag, tagtext)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetThreadsByTagRow
	for rows.Next() {
		var i GetThreadsByTagRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Threadtext,
			&i.Postedon,
			&i.Author,
			&i.Threadid,
			&i.Tagtext,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT username FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	err := row.Scan(&username)
	return username, err
}

const loginUser = `-- name: LoginUser :one
SELECT username FROM users
WHERE username = $1 AND pw = $2
`

type LoginUserParams struct {
	Username string
	Pw       string
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Username, arg.Pw)
	var username string
	err := row.Scan(&username)
	return username, err
}
